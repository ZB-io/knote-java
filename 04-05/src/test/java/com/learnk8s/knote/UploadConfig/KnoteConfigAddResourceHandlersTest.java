
// ********RoostGPT********
/*
Test generated by RoostGPT for test aman15thMaygitlab using AI Type  and AI Model

ROOST_METHOD_HASH=addResourceHandlers_48286cc0db
ROOST_METHOD_SIG_HASH=addResourceHandlers_289a4a6d21

"""
Scenario 1: Test to check if addResourceHandlers correctly registers a new resource handler

Details:
  TestName: testAddResourceHandlersRegistersNewHandler.
  Description: This test is meant to check if the addResourceHandlers method correctly registers a new resource handler with the specified path pattern ("/uploads/**") and resource location ("file:" + properties.getUploadDir()).
  Execution:
    Arrange: Mock a ResourceHandlerRegistry object and an instance of KnoteConfig with valid properties.
    Act: Invoke the addResourceHandlers method on the KnoteConfig instance, passing the mocked ResourceHandlerRegistry as a parameter.
    Assert: Use JUnit assertions to check if the addResourceHandler method of the mocked ResourceHandlerRegistry was called with the expected arguments.
  Validation:
    The assertion aims to verify that the addResourceHandler method is correctly called with the expected arguments. This is significant as it ensures that the application is able to correctly serve static resources from the specified location.

Scenario 2: Test to check if addResourceHandlers sets the correct cache period

Details:
  TestName: testAddResourceHandlersSetsCorrectCachePeriod.
  Description: This test is meant to check if the addResourceHandlers method correctly sets the cache period for the registered resource handler.
  Execution:
    Arrange: Mock a ResourceHandlerRegistry object and an instance of KnoteConfig with valid properties.
    Act: Invoke the addResourceHandlers method on the KnoteConfig instance, passing the mocked ResourceHandlerRegistry as a parameter.
    Assert: Use JUnit assertions to check if the setCachePeriod method of the returned ResourceHandlerRegistration was called with the expected value (3600).
  Validation:
    The assertion aims to verify that the setCachePeriod method is correctly called with the expected value. This is significant as it ensures that the application correctly sets the cache period for static resources, improving performance.

Scenario 3: Test to check if addResourceHandlers correctly adds a PathResourceResolver

Details:
  TestName: testAddResourceHandlersAddsPathResourceResolver.
  Description: This test is meant to check if the addResourceHandlers method correctly adds a PathResourceResolver to the resource chain of the registered resource handler.
  Execution:
    Arrange: Mock a ResourceHandlerRegistry object and an instance of KnoteConfig with valid properties.
    Act: Invoke the addResourceHandlers method on the KnoteConfig instance, passing the mocked ResourceHandlerRegistry as a parameter.
    Assert: Use JUnit assertions to check if the addResolver method of the returned ResourceHandlerRegistration was called with an instance of PathResourceResolver.
  Validation:
    The assertion aims to verify that the addResolver method is correctly called with an instance of PathResourceResolver. This is significant as it ensures that the application is able to correctly resolve paths for static resources.
"""
*/

// ********RoostGPT********

package com.learnk8s.knote.UploadConfig;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration;
import org.springframework.web.servlet.resource.PathResourceResolver;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.verify;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

public class KnoteConfigAddResourceHandlersTest {

	@Test
	@Tag("valid")
	public void testAddResourceHandlersRegistersNewHandler() {
		// Arrange
		ResourceHandlerRegistry mockRegistry = Mockito.mock(ResourceHandlerRegistry.class);
		ResourceHandlerRegistration mockRegistration = Mockito.mock(ResourceHandlerRegistration.class);
		Mockito.when(mockRegistry.addResourceHandler("/uploads/**")).thenReturn(mockRegistration);
		KnoteProperties properties = new KnoteProperties();
		properties.setUploadDir("testDir");
		KnoteConfig config = new KnoteConfig(properties);
		// Act
		config.addResourceHandlers(mockRegistry);
		// Assert
		verify(mockRegistry).addResourceHandler("/uploads/**");
		verify(mockRegistration).addResourceLocations("file:" + properties.getUploadDir());
	}

	@Test
	@Tag("valid")
	public void testAddResourceHandlersSetsCorrectCachePeriod() {
		// Arrange
		ResourceHandlerRegistry mockRegistry = Mockito.mock(ResourceHandlerRegistry.class);
		ResourceHandlerRegistration mockRegistration = Mockito.mock(ResourceHandlerRegistration.class);
		Mockito.when(mockRegistry.addResourceHandler("/uploads/**")).thenReturn(mockRegistration);
		KnoteProperties properties = new KnoteProperties();
		properties.setUploadDir("testDir");
		KnoteConfig config = new KnoteConfig(properties);
		// Act
		config.addResourceHandlers(mockRegistry);
		// Assert
		verify(mockRegistration).setCachePeriod(3600);
	}

	@Test
	@Tag("valid")
	public void testAddResourceHandlersAddsPathResourceResolver() {
		// Arrange
		ResourceHandlerRegistry mockRegistry = Mockito.mock(ResourceHandlerRegistry.class);
		ResourceHandlerRegistration mockRegistration = Mockito.mock(ResourceHandlerRegistration.class);
		Mockito.when(mockRegistry.addResourceHandler("/uploads/**")).thenReturn(mockRegistration);
		KnoteProperties properties = new KnoteProperties();
		properties.setUploadDir("testDir");
		KnoteConfig config = new KnoteConfig(properties);
		// Act
		config.addResourceHandlers(mockRegistry);
		// Assert
		verify(mockRegistration).addResolver(any(PathResourceResolver.class));
	}

}